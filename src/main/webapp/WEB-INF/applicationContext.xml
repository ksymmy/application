<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <bean id="jobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="com.wkcheng.quartz.job.TestJob"/>
        <property name="durability" value="true"/>
    </bean>

    <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        <property name="jobDetail" ref="jobDetail"/>
        <property name="startDelay" value="3000"/>
        <property name="repeatInterval" value="2000"/>
    </bean>

    <!-- 要执行任务的任务类。 -->
    <bean id="testQuartz" class="com.wkcheng.quartz.job.TestJob2"/>

    <!-- 将需要执行的定时任务注入JOB中。 -->
    <bean id="testCronJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="testQuartz"/>
        <!-- 任务类中需要执行的方法 -->
        <property name="targetMethod" value="doSomething"/>
        <!-- 上一次未执行完成的，要等待有再执行。 -->
        <property name="concurrent" value="false"/>
    </bean>

    <!-- 基本的定时器，会绑定具体的任务。 -->
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="testCronJob"/>
        <property name="startDelay" value="3000"/>
        <property name="cronExpression" value="* 0/1 * * * ?"/>
    </bean>

    <!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序 -->
    <bean id="schedulerFactoryBean" lazy-init="false" autowire="no"
          class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <!--                <ref bean="cronTrigger"/>-->
                <!--                <ref bean="simpleTrigger"/>-->
            </list>
        </property>
    </bean>

    <context:property-placeholder location="WEB-INF/ds.properties"/>

    <bean id="base" class="com.wkcheng.multids.DruidProperties">
        <property name="dsName" value="${ds1.dsName}"/>
        <property name="primary" value="${ds1.primary}"/>
        <property name="driverClassName" value="${ds1.driver}"/>
        <property name="url" value="${ds1.url}"/>
        <property name="username" value="${ds1.username}"/>
        <property name="password" value="${ds1.password}"/>
    </bean>

    <bean id="financing" class="com.wkcheng.multids.DruidProperties">
        <property name="dsName" value="${ds2.dsName}"/>
        <property name="primary" value="${ds2.primary}"/>
        <property name="driverClassName" value="${ds2.driver}"/>
        <property name="url" value="${ds2.url}"/>
        <property name="username" value="${ds2.username}"/>
        <property name="password" value="${ds2.password}"/>
    </bean>

    <bean id="multiDruidProperties" class="com.wkcheng.multids.MultiDruidProperties">
        <property name="multi">
            <list>
                <ref bean="base"/>
                <ref bean="financing"/>
            </list>
        </property>
    </bean>

    <!--配置数据源路由-->
    <!--    <bean id="dataSource" class="com.wkcheng.multids.MultiDataSource">-->
    <!--        &lt;!&ndash; 为targetDataSources注入两个数据源 &ndash;&gt;-->
    <!--        <property name="targetDataSources">-->
    <!--            <map key-type="java.lang.String">-->
    <!--                <entry key="base" value-ref="base"/>-->
    <!--                <entry key="financing" value-ref="financing"/>-->
    <!--            </map>-->
    <!--        </property>-->
    <!--        &lt;!&ndash; 为指定数据源RoutingDataSource注入默认的数据源&ndash;&gt;-->
    <!--        <property name="defaultTargetDataSource" ref="base"/>-->
    <!--    </bean>-->

    <!-- 自动注册service 必须在配置事务之上，否则@Transactional不起作用-->
    <context:component-scan base-package="com.wkcheng">
        <context:include-filter type="regex" expression=".*\.service\..*"/>
    </context:component-scan>

    <!--    &lt;!&ndash;配置事务&ndash;&gt;-->
    <!--    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
    <!--        <property name="dataSource" ref="dataSource"/>-->
    <!--    </bean>-->
    <!--    &lt;!&ndash; 支持注解形式 enable transaction annotation support &ndash;&gt;-->
    <!--    <tx:annotation-driven transaction-manager="txManager" />-->

</beans>